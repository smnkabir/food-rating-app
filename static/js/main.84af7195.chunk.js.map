{"version":3,"sources":["components/Item.js","components/Form.js","components/ItemView.js","App.js","serviceWorker.js","index.js"],"names":["Item","name","type","restaurant","location","price","Object","classCallCheck","this","vote","Form","_this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","state","msg","e","preventDefault","item","target","elements","value","props","addItem","setState","react_default","a","createElement","className","Component","ItemView","upVote","downVote","_this2","_this3","toString","onClick","App","show","buttonLabel","itemList","handelClickAction","push","components_Form","map","components_ItemView","key","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84af7195.chunk.js","sourcesContent":["\nclass Item {\n    constructor(name,type,restaurant,location,price){\n        this.name = name;\n        this.type = type;\n        this.restaurant = restaurant;\n        this.location = location;\n        this.price = price;\n        this.vote = 0;\n    }\n}\nexport default Item;","import React, { Component } from 'react';\nimport Item from './Item'\nimport '../css/materialize.css';\nclass Form extends Component {\n    constructor(){\n        super();\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n            msg: 0,\n        }\n    }\n    onSubmit(e){\n        e.preventDefault();\n        const item = new Item(e.target.elements.name.value\n            ,e.target.elements.type.value\n            ,e.target.elements.restaurant.value\n            ,e.target.elements.location.value\n            ,e.target.elements.price.value\n        );\n        \n        if(item.name && item.type && item.restaurant && item.location && item.price){\n            this.props.addItem(item);\n            e.target.elements.name.value = '';\n            e.target.elements.type.value = '';\n            e.target.elements.restaurant.value = '';\n            e.target.elements.location.value = '';\n            e.target.elements.price.value = '';\n\n        }\n        else{\n            this.setState({msg:1});\n        }\n    }\n    render() {\n        return(\n            <div className=\"row\">\n            <div className=\"col s12 m3\"></div>\n            <div className=\"col s12 m6 row z-depth-2\">\n            <form onSubmit={this.onSubmit}>\n                <table>\n                    <thead>\n                        <tr><th>Item Name </th><th><input name = \"name\"type=\"text\"/></th></tr>\n                    </thead>\n                    <thead>\n                        <tr><th>Item Type </th><th><input name = \"type\"type=\"text\"/></th></tr>\n                    </thead>\n                    <thead>\n                        <tr><th>Restaurant Name </th><th><input name = \"restaurant\"type=\"text\"/></th></tr>\n                    </thead>\n                    <thead>\n                        <tr><th>Location </th><th><input name = \"location\"type=\"text\"/></th></tr>\n                    </thead>\n                    <thead>\n                        <tr><th>Price </th><th><input name = \"price\"type=\"text\"/></th></tr>\n                    </thead>\n                    <thead>\n                        {this.state.msg ?(<tr><th><p className=\"red\" >Please fill up all field</p></th></tr>): ''}\n                        <tr><th></th><th><button className=\"waves-effect waves-light btn-large\">Add This Item</button></th></tr>\n                    </thead>\n            </table>\n                \n            </form>\n            </div>\n            \n            </div>\n        )\n    }\n}\nexport default Form;","import React, { Component } from 'react';\nimport '/home/nk/Desktop/web_app/food-rating-app/src/css/materialize.css';\nimport '../css/ItemView.css';\nclass ItemView extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            vote: this.props.item.vote,\n        }\n        this.upVote = this.upVote.bind(this);\n        this.downVote = this.downVote.bind(this);\n        \n    }\n    upVote(){\n        this.setState(()=>{\n          //  console.log(this.state.vote);\n            return{\n                vote: this.state.vote + 1,\n            }\n        });\n    }\n    downVote(){\n        if(this.state.vote >0)\n            this.setState(()=>{\n                return{\n                    vote: this.state.vote - 1,\n                }\n            });\n    }\n    render(){\n        return(\n             <div>\n                <div className=\"col s12 m4\">\n                <div className=\"card blue-grey darken-1\">\n                    <div className=\"card-content white-text\">\n                    <span className=\"card-title\">{this.props.item.name}</span>\n                    <p>({this.props.item.type})</p>\n                    <p>At {this.props.item.restaurant},{this.props.item.location}</p>\n                    <input className=\"valing center\" value = {\"+\" + this.state.vote.toString() + \" Votes\"}  type=\"text\"/>\n                    </div>\n                    <div className=\"card-action\">\n                    <button className=\"waves-effect waves-light btn-large\" onClick={this.upVote}>+</button>\n                    <button className=\"waves-effect waves-light btn-large\" onClick={this.downVote}>-</button>\n                    </div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default ItemView;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport ItemView from './components/ItemView';\nimport './App.css';\nimport './css/materialize.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      show: 0,\n      buttonLabel: 'Show Form',\n      itemList : [],\n\n    }\n    this.handelClickAction = this.handelClickAction.bind(this);\n    this.addItem = this.addItem.bind(this);\n  }\n  addItem(item){\n    //console.log(JSON.stringify(item));\n   // let string = JSON.stringify(item);\n    this.state.itemList.push(item);\n    this.setState(()=>{\n      return{\n        itemList: this.state.itemList,\n        show: 0,\n        buttonLabel : 'Show Form',\n      }\n    })\n  }\n  handelClickAction(){\n    this.setState(()=>{\n      if(this.state.show === 0)\n        return {\n          show : 1,\n          buttonLabel : 'Hide',\n        }\n      else\n        return {\n          show : 0,\n          buttonLabel : 'Show Form',\n        }\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <header>\n        <h1>Food Rating</h1>\n      </header>\n      <main>\n        {this.state.show ? <Form addItem = {this.addItem}/> : ''}\n        <button className = \"btn waves-effect waves-light\" onClick = {this.handelClickAction}>{this.state.buttonLabel}</button>\n        <h3>List Of All The Good Mood Foods</h3>\n        <hr/>\n        <div className=\"row\">\n          {this.state.itemList.map((item)=> <ItemView key = {item} item = {item}/>)}\n        </div>\n      </main>\n\n        <footer className=\"page-footer\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col l6 s12\">\n              <h5 className=\"white-text\">Nk Production</h5>\n              <p className=\"grey-text text-lighten-4\">Department of CSE,Southeast University,Banai,Dhaka.</p>\n            </div>\n            <div className=\"col l4 offset-l2 s12\">\n              <h5 className=\"white-text\">Find Me</h5>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer-copyright\">\n          <div className=\"container\">\n          © Nk @2018\n          </div>\n        </div>\n      </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}